class Slid {
      constructor(opt) {
            this.opt = {
                  el: '.slid',
                  offset: 20,
                  duration: 220,
                  perPage: 1,
                  itemTag: 'div',
                  restart: false,
                  loop: false,
                  onChange: null,
                  onInit: null,
                  ...opt
            }
            this.item = 0
            this.change = false
            this.animating = false
            this.clonned = false
            this.opt.perPage = 1 // Future
            // Init ------------------------------
            this.elt = document.querySelector(this.opt.el)
            this.elt.style.overflow = 'hidden'
            this.elt.style.display = 'inline-grid';
            this.elt.style.gridAutoColumns = (100 / this.opt.perPage) + '%';
            this.elt.style.gridTemplateRows = (100 / this.opt.perPage) + '%';
            this.elt.style.gridAutoFlow = 'column';

            // Get sizes --------------------------
            this.containerWidth = this.elt.offsetWidth / this.opt.perPage
            this.containerHeight = this.elt.offsetHeight

            // Control dragging -------------------
            this.drag = {
                  start: 0,
                  end: 0,
                  prev: 0,
                  isPressed: false
            }

            // Get items --------------------------
            this.items = document.querySelectorAll(this.opt.el + ">" + this.opt.itemTag)
            this.items_length = this.items.length - this.opt.perPage
            console.log(this.items.length)
            if (this.opt.loop) {
                  if (this.items.length == 2) {
                        this.clonned = true
                        // Create 2 prev nodes ------------------------------------
                        let el = this.elt.children[1].cloneNode(true)
                        this.elt.prepend(el)
                        let el1 = this.elt.children[1].cloneNode(true)
                        this.elt.prepend(el1)
                        // Recalculate --------------------------------------------
                        this.items = document.querySelectorAll(this.opt.el + ">" + this.opt.itemTag)
                        this.items_length = this.items.length - this.opt.perPage
                        this.item = 2
                  }
                  if (this.items.length > 2) {
                        this.slidePrev()
                  }
            }
            // init -------------------------------
            this.stop = this.containerWidth * this.item
            this.currentPos = this.stop
            this.elt.scrollTo(this.stop, 0)

            // Events -----------------------------
            this.elt.addEventListener('touchstart', (e) => {
                  this.startAction(e, true)
                  this.drag.isPressed = true
            })
            this.elt.addEventListener('touchmove', (e) => {
                  e.stopPropagation();
                  e.preventDefault();

                  this.drag.end = e.touches[0].pageX
                  this.elt.scrollBy(this.drag.prev - this.drag.end, 0)
                  this.drag.prev = this.drag.end
            })
            this.elt.addEventListener('touchend', (e) => {
                  this.swipeAction(e)
                  this.drag.isPressed = false
            })
            this.elt.addEventListener('mousedown', (e) => {
                  this.startAction(e)
                  this.drag.isPressed = true
            })
            this.elt.addEventListener('mousemove', (e) => {
                  e.stopPropagation();
                  e.preventDefault();
                  if (this.drag.isPressed) {
                        this.drag.end = e.pageX
                        this.elt.scrollBy(this.drag.prev - this.drag.end, 0)
                        this.drag.prev = this.drag.end
                  }
            })
            this.elt.addEventListener('mouseup', (e) => {
                  this.drag.isPressed = false
                  this.swipeAction(e)
            })
            this.elt.addEventListener('mouseout', (e) => {
                  this.drag.isPressed = false
            })
            window.onresize = () => {
                  this.containerWidth = this.elt.offsetWidth / this.opt.perPage
                  this.stop = this.containerWidth * this.item
            }

            // Loop ---------------------------------
            requestAnimationFrame(() => { this.loop() })

            // Init ---------------------------------
            if (typeof this.opt.onInit == 'function') {
                  this.opt.onInit()
            }
      }
      startAction(e, touch) {
            e.stopPropagation();
            if (touch) {
                  this.drag.start = e.touches[0].pageX
                  this.drag.prev = e.touches[0].pageX
            } else {
                  this.drag.start = e.pageX
                  this.drag.prev = e.pageX
            }
      }
      swipeAction(e) {
            e.stopPropagation();
            let am = Math.abs(this.drag.start - this.drag.end)
            if (am > this.opt.offset) {
                  if (this.drag.start - this.drag.end < 0) {
                        this.item--
                  }
                  if (this.drag.start - this.drag.end > 0) {
                        this.item++
                  }

                  let init = 0
                  let end = this.items_length

                  if (this.opt.restart) {
                        init = this.items_length
                        end = 0

                  }

                  if (this.item < 0) this.item = init
                  if (this.item > this.items_length) this.item = end
            }
            this.currentPos = this.elt.scrollLeft
            this.elt.scrollTo(this.containerWidth * this.item, 0)
            this.stop = this.containerWidth * this.item
      }
      setParm() {
            let init = 0
            let end = this.items_length

            // Invert if restart -----------------
            if (this.opt.restart && !this.opt.loop) {
                  init = this.items_length
                  end = 0
            }

            if (this.item < 0) this.item = init
            if (this.item > this.items_length) this.item = end

            this.currentPos = this.elt.scrollLeft
            this.elt.scrollTo(this.containerWidth * this.item, 0)
            this.stop = this.containerWidth * this.item
      }
      resetPos() {
            this.stop = this.containerWidth * this.item
            this.currentPos = this.stop
            this.elt.scrollTo(this.stop, 0)
      }
      next() {
            this.item++
            this.setParm()
      }
      prev() {
            this.item--
            this.setParm()
      }
      slidePrev() {
            // Loop < ----------------------------------------
            if (this.item == 0) {
                  this.elt.prepend(this.elt.children[this.items.length - 1])
                  this.item++
                  this.resetPos()
            }

      }
      slideNext() {
            // Loop > ----------------------------------------
            if (this.item == this.items_length) {
                  this.elt.appendChild(this.elt.children[0])
                  this.item--
                  this.resetPos()
            }

      }
      loop() {
            if (!this.drag.isPressed) {
                  let d = this.opt.duration
                  if (d < 60) d = 60
                  this.currentPos += (this.stop - this.currentPos) * (60 / d)
                  if (Math.abs(this.currentPos - this.stop) <= 1) {
                        this.elt.scrollTo(this.stop, 0)
                        if (!this.change && this.animating) this.change = true
                        this.animating = false

                  } else {
                        this.elt.scrollTo(this.currentPos, 0)
                        this.animating = true
                  }
            }
            if (this.change) {
                  if (this.opt.loop) {
                        this.slideNext()
                        this.slidePrev()
                  }
                  if (typeof this.opt.onChange == 'function') {
                        this.opt.onChange()
                  }
                  this.change = false
            }
            requestAnimationFrame(() => { this.loop() })
      }
      onChange(fn) {
            if (typeof fn == 'function') {
                  fn()
            }
      }
}